#!/usr/bin/env ruby

require "mote"
require "rdoc/rdoc"
require "rdoc/generator"

class RDoc::Generator::Tynn
  include Mote::Helpers

  RDoc::RDoc.add_generator(self)

  def initialize(store, options)
    @classes = store.all_classes_and_modules.sort
  end

  def generate
    @classes.each do |klass|
      content = render("api", doc: klass, classes: @classes)

      File.write(classfile(klass), content)
    end
  end

  def render(template, params = {})
    return mote(template_path(template), params.merge(app: self))
  end

  def template_path(template)
    return File.join(File.expand_path("../templates", __dir__), "#{ template }.mote")
  end

  def classfile(klass)
    return sprintf("%s.html", klass.full_name.gsub("::", "-"))
  end

  public def class_dir; end # required by RDoc
end

class RDoc::ClassModule
  def as_href(*)
    return sprintf("/api/%s.html", full_name.gsub("::", "-"))
  end
end

rdoc = RDoc::RDoc.new

rdoc.document([
  *ARGV,
  "--markup", "markdown",
  "-q", "-f", "tynn"
])
