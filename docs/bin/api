#!/usr/bin/env ruby

require "mote"
require "rdoc/rdoc"
require "rdoc/generator"

class RDoc::Generator::Tynn
  include Mote::Helpers

  RDoc::RDoc.add_generator(self)

  def initialize(store, options)
    @classes = merge_classes(store.all_classes_and_modules.sort)
  end

  def generate
    @classes.each { |c| generate_page(c) }
  end

  def generate_page(c)
    File.write(classfile(c), render("api", doc: c, classes: @classes))
  end

  def render(template, params = {})
    return mote(template_path(template), params.merge(app: self))
  end

  def template_path(template)
    return File.join(File.expand_path("../templates", __dir__), "#{ template }.mote")
  end

  def classfile(klass)
    return sprintf("%s.html", klass.full_name.gsub("::", "-"))
  end

  public def class_dir; end # required by RDoc

  def merge_classes(classes)
    classes.map { |c| merge_class(c, c.parent) }.compact
  end

  def merge_class(c, parent)
    if c.name == "ClassMethods"
      parent.class_method_list.concat(c.class_method_list)
      return
    elsif c.name == "InstanceMethods"
      parent.instance_method_list.concat(c.instance_method_list)
      return
    else
      return c
    end
  end
end

class RDoc::ClassModule
  def as_href(*)
    return sprintf("/api/%s.html", full_name.gsub("::", "-"))
  end
end

rdoc = RDoc::RDoc.new

rdoc.document([
  *ARGV,
  "--markup", "markdown",
  "-q", "-f", "tynn"
])
