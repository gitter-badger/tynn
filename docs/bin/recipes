#!/usr/bin/env ruby

input = ARGV[0]
output = ARGV[1]

class Recipe
  require "mote"
  require "redcarpet"

  include Mote::Helpers

  def initialize(file, output)
    @content = File.read(file)
    @output = output
  end

  def generate
    content = markdown(@content)
    title = content[/<h1.*>(.*)<\/h1>/, 1]

    write(render("recipe", title: title, content: content))
  end

  def markdown(content)
    renderer = Redcarpet::Markdown.new(
      Redcarpet::Render::HTML.new(with_toc_data: true),
      autolink: true,
      tables: true,
      fenced_code_blocks: true
    )

    return renderer.render(content)
  end

  def render(template, params = {})
    return mote(template_path(template), params.merge(app: self))
  end

  def template_path(template)
    return File.join(File.expand_path("../templates", __dir__), "#{ template }.mote")
  end

  def write(content)
    File.write(File.join(@output, "index.html"), content)
  end
end

files = File.join(input, "**/README.md")

Dir[files].reverse.each do |file|
  out = file.sub(input, output)
  dir = File.dirname(out)

  Dir.mkdir(dir) unless Dir.exists?(dir)

  Recipe.new(file, dir).generate
end
