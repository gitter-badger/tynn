{
  "name": "Tynn",
  "tagline": "A thin library for web development in Ruby",
  "body": "Tynn\r\n====\r\n\r\nA thin library for web development in Ruby.\r\n\r\n* [Installation](#installation)\r\n* [Environments](#environments)\r\n* [Static Files](#static-files)\r\n* [Testing](#testing)\r\n* [API Reference](http://api.tynn.xyz/)\r\n* [Changelog](#changelog)\r\n* [Development](#development)\r\n* [Contributing](#contributing)\r\n* [Code Status](#code-status)\r\n* [License](#license)\r\n\r\nInstallation\r\n------------\r\n\r\n```\r\n$ gem install tynn\r\n```\r\n\r\nEnvironments\r\n------------\r\n\r\nTynn ships with [Tynn::Environment] to set and check the current environment for the application.\r\n\r\n```ruby\r\nrequire \"tynn\"\r\nrequire \"tynn/environment\"\r\n\r\nTynn.plugin(Tynn::Environment)\r\n```\r\n\r\nThe default environment is based on the `RACK_ENV` environment variable.\r\n\r\n```ruby\r\nENV[\"RACK_ENV\"]\r\n# => \"test\"\r\n\r\nTynn.environment\r\n# => :test\r\n```\r\n\r\nIf `ENV[\"RACK_ENV\"]` is `nil`, the default value is `:development`.\r\n\r\n```ruby\r\nTynn.environment\r\n# => :development\r\n```\r\n\r\nTo change the current environment, use the `environment=` method.\r\n\r\n```ruby\r\nTynn.environment = :development\r\n\r\nTynn.environment\r\n# => :development\r\n```\r\n\r\nTo check the current environment, use: `development?`, `test?`,\r\n`production?` or `staging?`.\r\n\r\n```ruby\r\nTynn.plugin(Tynn::Protection, ssl: Tynn.production?)\r\n```\r\n\r\nPerform operations on specific environments with the `configure` method.\r\n\r\n```ruby\r\nTynn.configure(:development) do |app|\r\n  app.use(Tynn::Static, %w(/js /css /images))\r\nend\r\n\r\nTynn.configure(:production) do |app|\r\n  app.use(Tynn::SSL)\r\nend\r\n```\r\n\r\nStatic Files\r\n------------\r\n\r\nTynn ships with [Tynn::Static] to serve static files such as images, CSS, JavaScript and others.\r\n\r\n```ruby\r\nrequire \"tynn\"\r\nrequire \"tynn/static\"\r\n\r\nTynn.plugin(Tynn::Static, %w(/js /css /images))\r\n```\r\n\r\nBy default, static files are served from the folder `public` in the current directory. You can specify a different location by passing the `:root` option:\r\n\r\n```ruby\r\nTynn.plugin(Tynn::Static, %w(/js /css /images), root: \"assets\")\r\n```\r\n\r\nAs you can see in the table below, the name of static directory is not included in the URL because the files are looked up relative to that directory.\r\n\r\n\r\n| File                         | URL                                    |\r\n| ---------------------------- | -------------------------------------- |\r\n| ./public/js/application.js   | http://example.org/js/application.js   |\r\n| ./public/css/application.css | http://example.org/css/application.css |\r\n| ./public/images/logo.png     | http://example.org/images/logo.png     |\r\n\r\nIt's important to mention that the path of the static directory path is relative to the directory where you run the application. If you run the application from another directory, it's safer to use an absolute path:\r\n\r\n```ruby\r\nTynn.plugin(\r\n  Tynn::Static,\r\n  %w(/js /css /images),\r\n  root: File.expand_path(\"public\", __dir__)\r\n)\r\n```\r\n\r\nTesting\r\n-------\r\n\r\nTynn ships with [Tynn::Test], a simple helper class to simulate requests to your application.\r\n\r\n```ruby\r\nrequire \"tynn\"\r\nrequire \"tynn/test\"\r\n\r\nTynn.define do\r\n  root do\r\n    res.write(\"hei\")\r\n  end\r\nend\r\n\r\napp = Tynn::Test.new\r\napp.get(\"/\")\r\n\r\n200   == app.res.status # => true\r\n\"hei\" == app.res.body   # => true\r\n```\r\n\r\n[Tynn::Test] is test-framework agnostic. The following example uses [Minitest]:\r\n\r\n```ruby\r\nrequire \"minitest/autorun\"\r\nrequire \"tynn/test\"\r\n\r\nclass GuestsRouteTest < Minitest::Test\r\n  def setup\r\n    @app = Tynn::Test.new\r\n  end\r\n\r\n  def test_home\r\n    @app.get(\"/\")\r\n\r\n    assert_equal 200, @app.res.status\r\n    assert_equal \"Hello World!\", @app.res.body\r\n    assert_equal \"text/html\", @app.res[\"Content-Type\"]\r\n  end\r\nend\r\n```\r\n\r\nIf this is not of your flavor, you can use any Rack-based testing library or framework, like: [Rack::Test] or [Capybara].\r\n\r\nChangelog\r\n---------\r\n\r\nTo learn about new features, bug fixes, and changes, please refer to the [CHANGELOG](https://github.com/frodsan/tynn/blob/master/CHANGELOG.md).\r\n\r\nDevelopment\r\n------------\r\n\r\nFork the project with:\r\n\r\n```\r\n$ git clone git@github.com:frodsan/tynn.git\r\n```\r\n\r\nTo install dependencies, use:\r\n\r\n```\r\n$ bundle install\r\n```\r\n\r\nTo run the test suite, do:\r\n\r\n```\r\n$ rake test\r\n```\r\n\r\nContributing\r\n------------\r\n\r\nUse [GitHub Issues](https://github.com/frodsan/tynn/issues) for reporting bugs, discussing features and general feedback. If you've found a problem in Tynn, be sure to check the [past issues](https://github.com/frodsan/tynn/issues?state=closed) before open a new one.\r\n\r\nCode Status\r\n-----------\r\n\r\n[![Build Status](https://travis-ci.org/frodsan/tynn.svg?branch=master)](https://travis-ci.org/frodsan/tynn)\r\n\r\n[![Build History](https://buildstats.info/travisci/chart/frodsan/tynn?branch=master)](https://travis-ci.org/frodsan/tynn/builds)\r\n\r\nLicense\r\n-------\r\n\r\nTynn is released under the [MIT License](http://www.opensource.org/licenses/MIT).\r\n\r\n[capybara]: https://github.com/jnicklas/capybara\r\n[minitest]: https://github.com/seattlerb/minitest\r\n[rack::test]: https://github.com/brynary/rack-test\r\n[tynn::environment]: http://api.tynn.xyz/Tynn/Environment.html\r\n[tynn::static]: http://api.tynn.xyz/Tynn/Static.html\r\n[tynn::test]: http://api.tynn.xyz/Tynn/Test.html\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}